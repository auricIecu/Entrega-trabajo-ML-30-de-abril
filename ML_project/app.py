import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import yfinance as yf
from data_updater import update_dataset, get_last_update_time

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n de Bitcoin",
    page_icon="üìà",
    layout="wide"
)

# Funci√≥n para centrar texto con HTML/CSS
def centered_header(text, level=1):
    if level == 1:
        return st.markdown(f"<h1 style='text-align: center;'>{text}</h1>", unsafe_allow_html=True)
    elif level == 2:
        return st.markdown(f"<h2 style='text-align: center;'>{text}</h2>", unsafe_allow_html=True)
    elif level == 3:
        return st.markdown(f"<h3 style='text-align: center;'>{text}</h3>", unsafe_allow_html=True)
    else:
        return st.markdown(f"<p style='text-align: center; font-size: 20px;'>{text}</p>", unsafe_allow_html=True)

# Funciones auxiliares
# Replace your current load_data function with this one
@st.cache_data(ttl=3600)  # Cache for 1 hour
def load_data():
    """Cargar el dataframe procesado y actualizarlo si es necesario"""
    try:
        with st.spinner("Verificando actualizaciones de datos..."):
            df, updated = update_dataset()
            if updated:
                st.success("¬°Datos actualizados con √©xito!")
            return df
    except Exception as e:
        st.error(f"Error al actualizar datos: {e}")
        # Fall back to loading the existing file
        return pd.read_csv('data/df_selected.csv')

@st.cache_resource
def load_model():
    """Cargar el modelo entrenado"""
    with open('model/randomforest.pkl', 'rb') as file:
        return pickle.load(file)

def get_current_bitcoin_price():
    """Obtener el precio actual de Bitcoin desde Yahoo Finance"""
    btc_data = yf.Ticker("BTC-USD").history(period="1d")
    return btc_data['Close'].iloc[-1]

def get_bitcoin_historical_data():
    """Obtener datos hist√≥ricos de Bitcoin para graficar"""
    return yf.Ticker("BTC-USD").history(period="6mo")

def prepare_features_for_prediction(current_price):
    """Preparar features para la predicci√≥n con el modelo usando datos hist√≥ricos apropiados"""
    # Obtener datos de ayer y hoy para calcular cambios
    btc_data = yf.Ticker("BTC-USD").history(period="2d")
    qqq_data = yf.Ticker("QQQ").history(period="2d")
    vix_data = yf.Ticker("^VIX").history(period="2d")
    
    # Calcular cambio porcentual en Bitcoin
    if len(btc_data) >= 2:
        btc_change = ((btc_data['Close'].iloc[-1] - btc_data['Close'].iloc[-2]) / 
                      btc_data['Close'].iloc[-2]) * 100
    else:
        btc_change = 0
    
    # Obtener dificultad de Bitcoin desde el m√≥dulo data_updater
    try:
        from data_updater import get_bitcoin_difficulty
        difficulty = get_bitcoin_difficulty() or 0
    except:
        difficulty = 0
    
    features = {
        'close_btc': current_price,
        'close_qqq': qqq_data['Close'].iloc[-1],
        'difficulty': difficulty,
        'close_VIX': vix_data['Close'].iloc[-1],  # Corregido de Volume a Close
        'volume_qqq': qqq_data['Volume'].iloc[-1],
        'btc_change': btc_change
    }
    
    return pd.DataFrame([features])
# Cargar datos y modelo
df = load_data()
model = load_model()

# Obtener la p√°gina actual de los par√°metros de URL
page = st.query_params.get("page", "home")

# Funci√≥n para navegar a una p√°gina
def navigate_to(page_name):
    st.query_params["page"] = page_name

# Bot√≥n para volver al inicio (a√±adido a todas las p√°ginas excepto 'home')
def home_button():
    if st.button("üè† Volver a Inicio"):
        navigate_to("home")
        st.rerun()

# P√ÅGINA DE INICIO
if page == "home":
    # T√≠tulo y descripci√≥n
    centered_header("üìä Sistema de Predicci√≥n de Bitcoin")
    st.markdown("""
    <p style='text-align:center'>
    Esta aplicaci√≥n utiliza machine learning para predecir el movimiento del precio de Bitcoin para el d√≠a siguiente.
    </p>
    """, unsafe_allow_html=True)
    
    # ADD THE UPDATE STATUS CODE RIGHT HERE ‚Üì
    # Mostrar informaci√≥n sobre la actualizaci√≥n de datos
    last_update = get_last_update_time()
    col1, col2, col3 = st.columns([1,2,1])
    with col2:
        st.markdown("<div style='background-color:#f0f2f6; padding:12px; border-radius:5px; text-align:center;'>", unsafe_allow_html=True)
        st.markdown(f"**√öltima actualizaci√≥n de datos:** {last_update}")
        
        # Bot√≥n para actualizar datos manualmente
        if st.button("üîÑ Actualizar datos"):
            st.cache_data.clear()
            st.rerun()
            
        st.markdown("</div>", unsafe_allow_html=True)
    # END OF ADDED CODE
    
    # SECCI√ìN PRINCIPAL - GR√ÅFICO DE PRECIO
    centered_header("Precio actual de Bitcoin", level=2)

    # Obtener datos hist√≥ricos para graficar
    hist_data = get_bitcoin_historical_data()
    current_price = hist_data['Close'].iloc[-1]

    # Gr√°fico de precio
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(hist_data.index, hist_data['Close'])
    ax.set_title('Precio de Bitcoin (√öltimos 6 meses)')
    ax.set_ylabel('Precio (USD)')
    ax.grid(True, alpha=0.3)
    st.pyplot(fig)

    # Precio actual como m√©trica centralizada con estilo
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(
            f"""
            <div style='text-align: center; padding: 10px;'>
                <h3>BTC-USD</h3>
                <h2 style='color: #0068c9;'>${current_price:,.2f}</h2>
            </div>
            """, 
            unsafe_allow_html=True
        )

    # BOTONES DE NAVEGACI√ìN
    centered_header("Explorar m√°s informaci√≥n", level=3)
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üö¶ Predicci√≥n Sem√°foro", use_container_width=True):
            navigate_to("prediction")
            st.rerun()
    with col2:
        if st.button("üìä Datos Hist√≥ricos", use_container_width=True):
            navigate_to("historical")
            st.rerun()
    with col3:
        if st.button("üß† Modelo de Predicci√≥n", use_container_width=True):
            navigate_to("model")
            st.rerun()

# P√ÅGINA DE PREDICCI√ìN
elif page == "prediction":
    centered_header("üö¶ Predicci√≥n Sem√°foro para el D√≠a Siguiente")
    home_button()
    
    try:
        # Obtener precio actual
        current_price = get_current_bitcoin_price()
        
        # Preparar datos para predicci√≥n
        X_pred = prepare_features_for_prediction(current_price)
        
        # Hacer predicci√≥n
        prediction = model.predict(X_pred)[0]
        
        # Mostrar resultado con color apropiado
        col1, col2 = st.columns([1, 3])
        with col1:
            if prediction == 'verde':
                st.markdown('<div style="background-color:#28a745;color:white;padding:30px;border-radius:50%;text-align:center;font-size:24px;">üü¢</div>', unsafe_allow_html=True)
            elif prediction == 'amarillo':
                st.markdown('<div style="background-color:#ffc107;color:white;padding:30px;border-radius:50%;text-align:center;font-size:24px;">üü°</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div style="background-color:#dc3545;color:white;padding:30px;border-radius:50%;text-align:center;font-size:24px;">üî¥</div>', unsafe_allow_html=True)
        
        with col2:
            if prediction == 'verde':
                st.success("### VERDE - Tendencia alcista esperada")
                st.write("Se espera que el precio de Bitcoin suba en el pr√≥ximo d√≠a.")
            elif prediction == 'amarillo':
                st.warning("### AMARILLO - Mercado lateral esperado")
                st.write("Se espera poca variaci√≥n en el precio de Bitcoin para el pr√≥ximo d√≠a.")
            else:
                st.error("### ROJO - Tendencia bajista esperada")
                st.write("Se espera que el precio de Bitcoin baje en el pr√≥ximo d√≠a.")
    
        # Comparativa de rendimientos
        centered_header("Comparativa de rendimientos", level=2)
        st.markdown("<p style='text-align:center'>Rendimiento acumulado de las estrategias (RandomForest vs Buy & Hold)</p>", unsafe_allow_html=True)
        
        try:
            img = plt.imread('images/backtest_comparison.png')
            st.image(img, caption="", use_container_width=True)
        except:
            st.write("Imagen de backtest no encontrada. Aseg√∫rate de generar y guardar el gr√°fico de backtest en 'images/backtest_comparison.png'")
            
    except Exception as e:
        st.error(f"Error obteniendo datos actuales o realizando predicci√≥n: {e}")

# P√ÅGINA DE DATOS HIST√ìRICOS
elif page == "historical":
    centered_header("üìä Datos Hist√≥ricos Utilizados")
    home_button()
    
    st.dataframe(df)
    
    # Mostrar estad√≠sticas descriptivas
    if st.checkbox("Mostrar estad√≠sticas descriptivas"):
        st.write(df.describe())
    
    # Permitir visualizar correlaciones
    if st.checkbox("Mostrar matriz de correlaci√≥n"):
        corr_matrix = df.select_dtypes(include=[np.number]).corr()
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
        st.pyplot(fig)

# P√ÅGINA DEL MODELO
elif page == "model":
    centered_header("üß† Modelo Random Forest")
    home_button()
    
    st.markdown("<p style='text-align:center'>Este modelo fue seleccionado por tener la mejor capacidad de generalizaci√≥n entre los modelos evaluados.</p>", unsafe_allow_html=True)
    
    # Mostrar matriz de confusi√≥n
    centered_header("Matriz de confusi√≥n", level=2)
    try:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            img = plt.imread('images/confusion_matrix_randomforest.png')
            st.image(img, caption="", use_container_width=True)
    except:
        st.write("Imagen de matriz de confusi√≥n no encontrada. Aseg√∫rate de guardarla en 'images/confusion_matrix_randomforest.png'")
    
    # Mostrar importancia de features
    centered_header("Importancia de las caracter√≠sticas", level=2)
    try:
        # Extraer importancia de features si el modelo lo permite
        current_price = get_current_bitcoin_price()
        X_pred = prepare_features_for_prediction(current_price)
        
# Reemplaza las l√≠neas 285-295 con esto:

        if hasattr(model[-1], 'feature_importances_'):
            importances = model[-1].feature_importances_
            
            # Crear nombres de componentes PCA basados en el n√∫mero de importancias disponibles
            feature_names = [f'Componente PCA {i+1}' for i in range(len(importances))]
            
            # Ahora siempre coincidir√°n en longitud
            importance_df = pd.DataFrame({
                'Feature': feature_names,
                'Importance': importances
            }).sort_values('Importance', ascending=False)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(x='Importance', y='Feature', data=importance_df, ax=ax)
            plt.title('Importancia de los componentes PCA')
            st.pyplot(fig)
            
            # Informaci√≥n adicional sobre los componentes
            st.info(f"""
            **Nota sobre el modelo:** El algoritmo utiliza An√°lisis de Componentes Principales (PCA) que transforma las 6 caracter√≠sticas originales en {len(importances)} componentes principales que capturan el 90% de la varianza en los datos.

            **Las 6 caracter√≠sticas originales utilizadas son:**
            - **close_btc**: Precio de cierre de Bitcoin - Representa el valor actual de la criptomoneda
            - **close_qqq**: Precio del √≠ndice NASDAQ-100 (QQQ) - Indica la situaci√≥n del sector tecnol√≥gico
            - **difficulty**: Dificultad de miner√≠a de Bitcoin - Refleja la complejidad computacional de minar nuevos bloques
            - **close_VIX**: √çndice de volatilidad - Tambi√©n conocido como "√≠ndice del miedo", mide la incertidumbre del mercado
            - **volume_qqq**: Volumen de negociaci√≥n del QQQ - Indica la actividad del mercado tecnol√≥gico
            - **btc_change**: Cambio porcentual en el precio de Bitcoin - Representa la tendencia reciente

            Estas caracter√≠sticas se combinan matem√°ticamente en {len(importances)} componentes principales que capturan los patrones m√°s significativos para la predicci√≥n.
            """)
        else:
            st.write("La importancia de features no est√° disponible para este modelo")
            
            # Texto explicativo sobre importancia de caracter√≠sticas
            st.markdown("""
            <div style='background-color:#f8f9fa; padding:15px; border-radius:10px; margin-top:20px;'>
                <h4 style='text-align:center'>¬øQu√© significa la importancia de caracter√≠sticas?</h4>
                <p>En un modelo Random Forest, <strong>la importancia de las caracter√≠sticas</strong> indica cu√°nto contribuye cada variable a la precisi√≥n de las predicciones:</p>
                <ul>
                    <li><strong>Mayor valor</strong>: La caracter√≠stica tiene un impacto m√°s fuerte en la predicci√≥n del comportamiento del Bitcoin.</li>
                    <li><strong>Menor valor</strong>: La caracter√≠stica tiene menos influencia en la decisi√≥n del modelo.</li>
                </ul>
                <p>Esto nos ayuda a entender qu√© factores del mercado son m√°s relevantes para predecir si el precio del Bitcoin subir√°, bajar√° o se mantendr√° estable.</p>
            </div>
            """, unsafe_allow_html=True)
    except Exception as e:
        st.write(f"Error mostrando importancia de features: {e}")